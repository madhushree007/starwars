{"version":3,"sources":["types/actionTypes.ts","action.ts","components/Buttons/Nav.tsx","components/Buttons/PlayMore.tsx","components/InfoCard/InfoCardPeople.tsx","components/InfoCard/InfoCardPlanets.tsx","components/InfoCard/InfoCardStarships.tsx","components/Game/Game.tsx","components/Login/Login.tsx","App.tsx","reportWebVitals.ts","Reducer.ts","Store.ts","index.tsx"],"names":["SET_LOADING","SET_PLAYER_CARD_PEOPLE","SET_PLAYER_CARD_STARSHIPS","SET_PLAYER_CARD_PLANETS","SET_COMPUTER_CARD_PEOPLE","SET_COMPUTER_CARD_STARSHIPS","SET_COMPUTER_CARD_PLANETS","SET_FLIPPED","SET_GAME_STATE","SET_PLAYER_SCORE","SET_COMPUTER_SCORE","USER_LOGIN","USER_LOGOUT","SET_PLAY_OPTION","BASE_URL","set_loading","loading","type","set_card_flip","isFlipped","set_game_state","playGame","set_player_score","set_computer_score","play_option","playOption","Nav","useSelector","store","dispatch","useDispatch","Row","Col","Button","variant","onClick","Badge","pill","PlayMore","style","paddingTop","Card","bg","text","className","Body","aria-label","width","InfoCardPeople","info","isCardFlipped","flipDirection","border","height","Title","ListGroup","Item","name","gender","mass","InfoCardPlanets","rotation_period","orbital_period","diameter","InfoCardStarships","model","cost_in_credits","crew","Game","playerCardPeople","playerCardPlanets","playerCardStarShip","computerCardPeople","computerCardPlanets","computerCardStarShip","playGameState","playerScore","computerScore","username","playWith","console","log","a","randNum1","Math","floor","random","axios","get","res1","data","randNum2","res2","Login","useState","user","setUser","onSubmit","e","preventDefault","htmlFor","value","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","Reducer","state","action","Store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAAaA,EAAc,cACdC,EAAyB,yBACzBC,EAA4B,4BAC5BC,EAA0B,0BAC1BC,EAA2B,2BAC3BC,EAA8B,8BAC9BC,EAA4B,4BAC5BC,EAAc,cACdC,EAAiB,iBACjBC,EAAmB,mBACnBC,EAAqB,qBACrBC,EAAa,aACbC,EAAc,cACdC,EAAkB,kBCVzBC,EAAW,yBAGV,SAASC,EAAYC,GAC1B,MAAO,CACLC,KAAMjB,EACNgB,WAqDG,SAASE,EAAcC,GAC5B,MAAO,CACLF,KAAMV,EACNY,aAKG,SAASC,EAAeC,GAC7B,MAAO,CACLJ,KAAMT,EACNa,YAKG,SAASC,IACd,MAAO,CACLL,KAAMR,GAKH,SAASc,IACd,MAAO,CACLN,KAAMP,GAoBH,SAASc,EAAYC,GAC1B,MAAO,CACLR,KAAMJ,EACNY,cCxGJ,IAsBeC,EAtBO,WACpB,IAAMD,EAAaE,aAAY,SAACC,GAAD,OAAsBA,EAAMH,cACrDI,EAAWC,cACjB,OACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,+BACA,eAACC,EAAA,EAAD,CAAQC,QAAwB,WAAfT,EAA0B,UAAY,QAASU,QAAS,kBAAMN,EAASL,EAAY,YAApG,oBACS,cAACY,EAAA,EAAD,CAAOC,MAAI,EAACH,QAAQ,QAApB,uBAET,eAACD,EAAA,EAAD,CAAQC,QAAwB,YAAfT,EAA2B,UAAY,QAASU,QAAS,kBAAMN,EAASL,EAAY,aAArG,qBACU,cAACY,EAAA,EAAD,CAAOC,MAAI,EAACH,QAAQ,QAApB,2BAEV,eAACD,EAAA,EAAD,CAAQC,QAAwB,cAAfT,EAA6B,UAAY,QAASU,QAAS,kBAAMN,EAASL,EAAY,eAAvG,uBACY,cAACY,EAAA,EAAD,CAAOC,MAAI,EAACH,QAAQ,QAApB,+B,OCKLI,EArBY,WACzB,IAAMT,EAAWC,cAOjB,OACE,qBAAKS,MAAO,CAACC,WAAY,QAAzB,SACE,cAACC,EAAA,EAAD,CAAMC,GAAG,OAAOC,KAAK,QAAQC,UAAU,cAAvC,SACE,eAACH,EAAA,EAAKI,KAAN,WACE,yEACA,cAACZ,EAAA,EAAD,CAAQa,aAAW,YAAYZ,QAAQ,UAAUK,MAAO,CAACQ,MAAO,SAAUZ,QAVlE,WACdN,EAASX,GAAc,IACvBW,EAAST,GAAe,KAQlB,gC,yBCNK,SAAS4B,EAAT,GAA2D,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,cAC9C,OACE,eAAC,IAAD,CAAe/B,UAAW+B,EAAeC,cAAc,aAAvD,UACI,8BACE,cAACV,EAAA,EAAD,CAAMW,OAAO,OAAOV,GAAG,OAAOH,MAAO,CAAEc,OAAQ,aAIjD,8BACE,eAACZ,EAAA,EAAD,CAAMW,OAAO,OAAOb,MAAO,CAAEc,OAAQ,SAArC,UACE,cAACZ,EAAA,EAAKa,MAAN,IACA,cAACb,EAAA,EAAKI,KAAN,UACE,eAACU,EAAA,EAAD,CAAWrB,QAAQ,QAAnB,UACI,eAACqB,EAAA,EAAUC,KAAX,oBAAuBP,GAAQA,EAAKQ,QACpC,eAACF,EAAA,EAAUC,KAAX,sBAAyBP,GAAQA,EAAKI,UACtC,eAACE,EAAA,EAAUC,KAAX,sBAAyBP,GAAQA,EAAKS,UACtC,eAACH,EAAA,EAAUC,KAAX,CAAgBtB,QAAQ,OAAxB,mBAAsCe,GAAQA,EAAKU,qBCjBtD,SAASC,EAAT,GAA4D,IAAhCX,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,cAC/C,OACE,eAAC,IAAD,CAAe/B,UAAW+B,EAAeC,cAAc,aAAvD,UACI,8BACE,cAACV,EAAA,EAAD,CAAMW,OAAO,OAAOV,GAAG,OAAOH,MAAO,CAAEc,OAAQ,aAIjD,8BACE,eAACZ,EAAA,EAAD,CAAMW,OAAO,OAAOb,MAAO,CAAEc,OAAQ,SAArC,UACE,cAACZ,EAAA,EAAKa,MAAN,IACA,cAACb,EAAA,EAAKI,KAAN,UACE,eAACU,EAAA,EAAD,CAAWrB,QAAQ,QAAnB,UACI,eAACqB,EAAA,EAAUC,KAAX,oBAAuBP,GAAQA,EAAKQ,QACpC,eAACF,EAAA,EAAUC,KAAX,+BAAkCP,GAAQA,EAAKY,mBAC/C,eAACN,EAAA,EAAUC,KAAX,uBAA0BP,GAAQA,EAAKa,kBACvC,eAACP,EAAA,EAAUC,KAAX,CAAgBtB,QAAQ,OAAxB,uBAA0Ce,GAAQA,EAAKc,yBCf1D,SAASC,EAAT,GAA8D,IAAhCf,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,cACjD,OACE,eAAC,IAAD,CAAe/B,UAAW+B,EAAeC,cAAc,aAAvD,UACI,8BACE,cAACV,EAAA,EAAD,CAAMW,OAAO,OAAOV,GAAG,OAAOH,MAAO,CAAEc,OAAQ,aAIjD,8BACE,eAACZ,EAAA,EAAD,CAAMW,OAAO,OAAOb,MAAO,CAAEc,OAAQ,SAArC,UACE,cAACZ,EAAA,EAAKa,MAAN,IACA,cAACb,EAAA,EAAKI,KAAN,UACE,eAACU,EAAA,EAAD,CAAWrB,QAAQ,QAAnB,UACI,eAACqB,EAAA,EAAUC,KAAX,oBAAuBP,GAAQA,EAAKQ,QACpC,eAACF,EAAA,EAAUC,KAAX,qBAAwBP,GAAQA,EAAKgB,SACrC,eAACV,EAAA,EAAUC,KAAX,+BAAkCP,GAAQA,EAAKiB,mBAC/C,eAACX,EAAA,EAAUC,KAAX,CAAgBtB,QAAQ,OAAxB,mBAAsCe,GAAQA,EAAKkB,qB,UCkDtDC,EAhEQ,WACrB,IAAMC,EAAmB1C,aAAY,SAACC,GAAD,OAAsBA,EAAMyC,oBAC3DC,EAAoB3C,aAAY,SAACC,GAAD,OAAsBA,EAAM0C,qBAC5DC,EAAqB5C,aAAY,SAACC,GAAD,OAAsBA,EAAM2C,sBAC7DC,EAAqB7C,aAAY,SAACC,GAAD,OAAsBA,EAAM4C,sBAC7DC,EAAsB9C,aAAY,SAACC,GAAD,OAAsBA,EAAM6C,uBAC9DC,EAAuB/C,aAAY,SAACC,GAAD,OAAsBA,EAAM8C,wBAC/DxB,EAAgBvB,aAAY,SAACC,GAAD,OAAsBA,EAAMT,aACxDwD,EAAgBhD,aAAY,SAACC,GAAD,OAAsBA,EAAMP,YACxDuD,EAAcjD,aAAY,SAACC,GAAD,OAAsBA,EAAMgD,eACtDC,EAAgBlD,aAAY,SAACC,GAAD,OAAsBA,EAAMiD,iBACxDC,EAAWnD,aAAY,SAACC,GAAD,OAAsBA,EAAMkD,YACnDrD,EAAaE,aAAY,SAACC,GAAD,OAAsBA,EAAMH,cAErDI,EAAWC,cAUjB,OACE,qCACE,sBAAKc,UAAU,UAAf,UACI,0CAAakC,EAAb,OACA,oBAAI3C,QAAS,kBAAMN,EN4DpB,CACLZ,KAAML,KM7DA,uBAEJ,sBAAKgC,UAAU,YAAf,UACE,qEACA,wOAEF,cAAC,EAAD,IAEA,eAACb,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAK,+BAAK8C,EAAL,YAAuB,cAAC1C,EAAA,EAAD,CAAOF,QAAQ,UAAf,SAA0B0C,SACtD,cAAC5C,EAAA,EAAD,UAAK,mDAAqB,cAACI,EAAA,EAAD,CAAOF,QAAQ,UAAf,SAA0B2C,YAEtD,sBAAKjC,UAAU,gBAAf,UAEE,eAACb,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACmB,WAAfP,GAA2B,cAACuB,EAAD,CAAgBC,KAAMoB,EAAkBnB,cAAeA,IACnE,YAAfzB,GAA4B,cAACmC,EAAD,CAAiBX,KAAMqB,EAAmBpB,cAAeA,IACtE,cAAfzB,GAA8B,cAACuC,EAAD,CAAmBf,KAAMsB,EAAoBrB,cAAeA,OAE9F,eAAClB,EAAA,EAAD,WACmB,WAAfP,GAA2B,cAACuB,EAAD,CAAgBC,KAAMuB,EAAoBtB,cAAeA,IACrE,YAAfzB,GAA4B,cAACmC,EAAD,CAAiBX,KAAMwB,EAAqBvB,cAAeA,IACxE,cAAfzB,GAA8B,cAACuC,EAAD,CAAmBf,KAAMyB,EAAsBxB,cAAeA,UAGlG,cAACnB,EAAA,EAAD,CAAKa,UAAU,aAAf,UACqB,IAAlB+B,GAA0B,cAAC1C,EAAA,EAAD,CAAQC,QAAQ,UAAUK,MAAO,CAACQ,MAAO,SAAUZ,QAtCrE,WNsFZ,IAAqB4C,EMrFxBlD,EAASX,GAAc,IACvB8D,QAAQC,IAAIxD,GACTA,GAAYI,GNmFSkD,EMnFYtD,ENoFtC,uCAAO,WAAOI,GAAP,qBAAAqD,EAAA,6DACLrD,EAASd,GAAY,IAEjBoE,EAAWC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAH3C,SAIcC,IAAMC,IAAN,UAAa1E,GAAb,OAAwBiE,EAAxB,YAAoCI,EAApC,MAJd,cAICM,EAJD,OAKY,WAAbV,EAAuBlD,GA5GQwC,EA4GwBoB,EAAKC,KA3G3D,CACLzE,KAAMhB,EACNoE,sBA0GsB,YAAbU,EAAwBlD,GA7FGyC,EA6F8BmB,EAAKC,KA5FlE,CACLzE,KAAMd,EACNmE,uBA2FsB,cAAbS,GAA0BlD,GAtGG0C,EAsGgCkB,EAAKC,KArGtE,CACLzE,KAAMf,EACNqE,wBAqGIoB,EAAWP,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAT3C,SAUcC,IAAMC,IAAN,UAAa1E,GAAb,OAAwBiE,EAAxB,YAAoCY,EAApC,MAVd,OAUCC,EAVD,OAWY,WAAbb,EAAuBlD,GA1FU2C,EA0FwBoB,EAAKF,KAzF7D,CACLzE,KAAMb,EACNoE,wBAwFsB,YAAbO,EAAwBlD,GA3EK4C,EA2E8BmB,EAAKF,KA1EpE,CACLzE,KAAMX,EACNmE,yBAyEsB,cAAbM,GAA0BlD,GApFK6C,EAoFgCkB,EAAKF,KAnFxE,CACLzE,KAAMZ,EACNqE,0BAoFiB,WAAbK,GACEU,GAAQG,IACNH,EAAKC,KAAK/B,KAAOiC,EAAKF,KAAK/B,KAC7B9B,EAASP,KACAsE,EAAKF,KAAK/B,KAAO8B,EAAKC,KAAK/B,MACpC9B,EAASN,MAME,cAAbwD,GACEU,GAAQG,IACNH,EAAKC,KAAKvB,KAAOyB,EAAKF,KAAKvB,KAC7BtC,EAASP,KACAsE,EAAKF,KAAKvB,KAAOsB,EAAKC,KAAKvB,MACpCtC,EAASN,MAME,YAAbwD,GACEU,GAAQG,IACNH,EAAKC,KAAK3B,SAAW6B,EAAKF,KAAK3B,SACjClC,EAASP,KACAsE,EAAKF,KAAK3B,SAAW0B,EAAKC,KAAK3B,UACxClC,EAASN,MAKfM,EAASd,GAAY,IAhDhB,kCAvEF,IAAqC2D,EAQFD,EAhBDD,EAhBCD,EAQFD,EAhBDD,IAuG9B,OAAP,wDMnFExC,EAAST,GAAe,KAkCS,wBAIZ,IAAlBuD,GAA2B,cAAC,EAAD,Q,cClEnB,SAASkB,IAAU,IAAD,EACPC,mBAAS,IADF,mBACxBC,EADwB,KAClBC,EADkB,KAEzBnE,EAAWC,cAMjB,OACE,qBAAKc,UAAU,QAAf,SACE,qBAAKA,UAAU,QAAf,SACE,cAACH,EAAA,EAAD,CAAMG,UAAU,cAAcQ,OAAO,OAAOV,GAAG,OAAOC,KAAK,QAA3D,SACF,eAACF,EAAA,EAAKI,KAAN,WACE,8BACI,0CACU,uBAAM,sCAAe,uBAD/B,iBAKJ,uBAAMD,UAAU,UAAUqD,SAff,SAACC,GAChBA,EAAEC,iBACFtE,EPiFK,CACLZ,KAAMN,EACNmE,SOnFoBiB,KAahB,UACE,uBAAOK,QAAQ,YAAf,oCACA,uBAAO3C,KAAK,YAAY4C,MAAON,EAAMO,SAAU,SAAAJ,GAAC,OAAIF,EAAQE,EAAEK,OAAOF,UACrE,cAACpE,EAAA,EAAD,CAAQhB,KAAK,SAASiB,QAAQ,UAAUK,MAAO,CAACQ,MAAO,SAAvD,+BCrBV,IASeyD,EATO,WACpB,IAAMT,EAAOpE,aAAY,SAACC,GAAD,OAAsBA,EAAMkD,YACrD,OACE,qBAAKlC,UAAU,YAAf,SACImD,EAAO,cAAC,EAAD,IAAW,cAACF,EAAD,OCGXY,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,yBCSRQ,GAA8B,CAClClG,SAAS,EACTG,WAAW,EACXE,UAAU,EACVuD,YAAa,EACbC,cAAe,EACfpD,WAAY,UA8FC0F,GA3FC,WAAwF,IAAvFC,EAAsF,uDAA/DF,GAAcG,EAAiD,uCACrG,OAAQA,EAAOpG,MACb,KAAKjB,EACH,OAAO,6BACFoH,GADL,IAEEpG,QAASqG,EAAOrG,UAEpB,KAAKf,EACH,OAAO,6BACFmH,GADL,IAEE/C,iBAAkBgD,EAAOhD,mBAG7B,KAAKjE,EACH,OAAO,6BACFgH,GADL,IAEE5C,mBAAoB6C,EAAO7C,qBAG/B,KAAKtE,EACH,OAAO,6BACFkH,GADL,IAEE7C,mBAAoB8C,EAAO9C,qBAG/B,KAAKlE,EACH,OAAO,6BACF+G,GADL,IAEE1C,qBAAsB2C,EAAO3C,uBAGjC,KAAKvE,EACH,OAAO,6BACFiH,GADL,IAEE9C,kBAAmB+C,EAAO/C,oBAG9B,KAAKhE,EACH,OAAO,6BACF8G,GADL,IAEE3C,oBAAqB4C,EAAO5C,sBAGhC,KAAKlE,EACH,OAAO,6BACF6G,GADL,IAEEjG,UAAWkG,EAAOlG,YAGtB,KAAKX,EACH,OAAO,6BACF4G,GADL,IAEE/F,SAAUgG,EAAOhG,WAGrB,KAAKZ,EACH,OAAO,6BACF2G,GADL,IAEExC,YAAawC,EAAMxC,YAAc,IAGrC,KAAKlE,EACH,OAAO,6BACF0G,GADL,IAEEvC,cAAeuC,EAAMvC,cAAgB,IAGzC,KAAKlE,EACH,OAAO,6BACFyG,GADL,IAEEtC,SAAUuC,EAAOvC,WAGrB,KAAKlE,EACH,OAAO,6BACFwG,GADL,IAEEtC,SAAU,KAGd,KAAKjE,EACH,OAAO,6BACFuG,GADL,IAEE3F,WAAY4F,EAAO5F,aAGvB,QACE,OAAO2F,ICzGEE,GAJDC,YAAYJ,GAASK,YAAgBC,OCInDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUhG,MAAO0F,GAAjB,SACE,cAAC,EAAD,QAIJO,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.3d6e0117.chunk.js","sourcesContent":["export const SET_LOADING = 'SET_LOADING';\nexport const SET_PLAYER_CARD_PEOPLE = 'SET_PLAYER_CARD_PEOPLE';\nexport const SET_PLAYER_CARD_STARSHIPS = 'SET_PLAYER_CARD_STARSHIPS';\nexport const SET_PLAYER_CARD_PLANETS = 'SET_PLAYER_CARD_PLANETS';\nexport const SET_COMPUTER_CARD_PEOPLE = 'SET_COMPUTER_CARD_PEOPLE';\nexport const SET_COMPUTER_CARD_STARSHIPS = 'SET_COMPUTER_CARD_STARSHIPS';\nexport const SET_COMPUTER_CARD_PLANETS = 'SET_COMPUTER_CARD_PLANETS';\nexport const SET_FLIPPED = 'SET_FLIPPED';\nexport const SET_GAME_STATE = 'SET_GAME_STATE';\nexport const SET_PLAYER_SCORE = 'SET_PLAYER_SCORE';\nexport const SET_COMPUTER_SCORE = 'SET_COMPUTER_SCORE';\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const USER_LOGOUT = 'USER_LOGOUT';\nexport const SET_PLAY_OPTION = 'SET_PLAY_OPTION';\n\nexport type PeopleI = {\n  name: string,\n  height: number,\n  mass: number,\n  gender: string\n}\n\nexport type StarShipI = {\n  name: string,\n  model: number,\n  cost_in_credits: number,\n  crew: string\n}\n\nexport type PlanetsI = {\n  name: string,\n  rotation_period: number,\n  orbital_period: number,\n  diameter: string\n}\n\nexport interface SetLoading {\n  type: typeof SET_LOADING,\n  loading: boolean\n}\n\nexport interface SetPlayerCardPeople {\n  type: typeof SET_PLAYER_CARD_PEOPLE,\n  playerCardPeople: PeopleI\n}\n\nexport interface SetComputerCardPeople {\n  type: typeof SET_COMPUTER_CARD_PEOPLE,\n  computerCardPeople: PeopleI\n}\n\nexport interface SetPlayerCardStarShip {\n  type: typeof SET_PLAYER_CARD_STARSHIPS,\n  playerCardStarShip?: StarShipI\n}\n\nexport interface SetComputerCardStarShip {\n  type: typeof SET_COMPUTER_CARD_STARSHIPS,\n  computerCardStarShip: StarShipI\n}\n\nexport interface SetPlayerCardPlanets {\n  type: typeof SET_PLAYER_CARD_PLANETS,\n  playerCardPlanets?: PlanetsI\n}\n\nexport interface SetComputerCardPlanets {\n  type: typeof SET_COMPUTER_CARD_PLANETS,\n  computerCardPlanets: PlanetsI\n}\n\nexport interface SetCardFlipped {\n  type: typeof SET_FLIPPED,\n  isFlipped: boolean\n}\n\nexport interface SetGameState {\n  type: typeof SET_GAME_STATE,\n  playGame: boolean\n}\n\nexport interface SetPlayerScore {\n  type: typeof SET_PLAYER_SCORE,\n}\n\nexport interface SetComputerScore {\n  type: typeof SET_COMPUTER_SCORE,\n}\n\nexport interface UserLogin {\n  type: typeof USER_LOGIN,\n  username: string\n}\n\nexport interface UserLogout {\n  type: typeof USER_LOGOUT\n}\n\nexport interface SetPlayOption {\n  type: typeof SET_PLAY_OPTION\n  playOption: string\n}\n\nexport type StarWarsDispatchTypes = SetLoading | SetPlayerCardPeople | SetComputerCardPeople | SetPlayerCardStarShip | SetComputerCardStarShip | SetPlayerCardPlanets | SetComputerCardPlanets | SetCardFlipped | SetGameState | SetPlayerScore | SetComputerScore | UserLogin | UserLogout | SetPlayOption","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { PeopleI, PlanetsI, SET_COMPUTER_CARD_PEOPLE, SET_COMPUTER_CARD_PLANETS, SET_COMPUTER_CARD_STARSHIPS, SET_COMPUTER_SCORE, SET_FLIPPED, SET_GAME_STATE, SET_LOADING, SET_PLAYER_CARD_PEOPLE, SET_PLAYER_CARD_PLANETS, SET_PLAYER_CARD_STARSHIPS, SET_PLAYER_SCORE, SET_PLAY_OPTION, StarShipI, StarWarsDispatchTypes, USER_LOGIN, USER_LOGOUT } from './types/actionTypes';\nconst BASE_URL = 'https://swapi.dev/api/';\n\n// set loading state\nexport function set_loading(loading: boolean): StarWarsDispatchTypes {\n  return {\n    type: SET_LOADING,\n    loading\n  }\n}\n\n// set Player's people card\nexport function set_player_card_people(playerCardPeople: PeopleI): StarWarsDispatchTypes {\n  return {\n    type: SET_PLAYER_CARD_PEOPLE,\n    playerCardPeople\n  }\n}\n\n// set Computer's people card\nexport function set_player_card_starships(playerCardStarShip: StarShipI): StarWarsDispatchTypes {\n  return {\n    type: SET_PLAYER_CARD_STARSHIPS,\n    playerCardStarShip\n  }\n}\n\n// set Player's planets card\nexport function set_player_card_planets(playerCardPlanets: PlanetsI): StarWarsDispatchTypes {\n  return {\n    type: SET_PLAYER_CARD_PLANETS,\n    playerCardPlanets\n  }\n}\n\n// set Computer's people card\nexport function set_computer_card_people(computerCardPeople: PeopleI): StarWarsDispatchTypes {\n  return {\n    type: SET_COMPUTER_CARD_PEOPLE,\n    computerCardPeople\n  }\n}\n\n// set Computer's starships card\nexport function set_computer_card_starships(computerCardStarShip: StarShipI): StarWarsDispatchTypes {\n  return {\n    type: SET_COMPUTER_CARD_STARSHIPS,\n    computerCardStarShip\n  }\n}\n\n// set Computer's planets card\nexport function set_computer_card_planets(computerCardPlanets: PlanetsI): StarWarsDispatchTypes {\n  return {\n    type: SET_COMPUTER_CARD_PLANETS,\n    computerCardPlanets\n  }\n}\n\n// set card flip state\nexport function set_card_flip(isFlipped: boolean): StarWarsDispatchTypes {\n  return {\n    type: SET_FLIPPED,\n    isFlipped\n  }\n}\n\n// set game state\nexport function set_game_state(playGame: boolean): StarWarsDispatchTypes {\n  return {\n    type: SET_GAME_STATE,\n    playGame\n  }\n}\n\n// set player's score\nexport function set_player_score(): StarWarsDispatchTypes {\n  return {\n    type: SET_PLAYER_SCORE\n  }\n}\n\n// set Computer's score\nexport function set_computer_score(): StarWarsDispatchTypes {\n  return {\n    type: SET_COMPUTER_SCORE\n  }\n}\n\n// set username\nexport function user_login(username: string): StarWarsDispatchTypes {\n  return {\n    type: USER_LOGIN,\n    username\n  }\n}\n\n// logout user\nexport function user_logout(): StarWarsDispatchTypes {\n  return {\n    type: USER_LOGOUT\n  }\n}\n\n// set playing option\nexport function play_option(playOption: string): StarWarsDispatchTypes {\n  return {\n    type: SET_PLAY_OPTION,\n    playOption\n  }\n}\n\n\n// Fetch data from server\nexport function fetchSWInfo(playWith: string) {\n  return async (dispatch: Dispatch<StarWarsDispatchTypes>) => {\n    dispatch(set_loading(true));\n\n    let randNum1 = Math.floor(Math.random() * 15) + 1;\n    const res1 = await axios.get(`${BASE_URL}${playWith}/${randNum1}/`);\n    if (playWith === 'people') dispatch(set_player_card_people(res1.data));\n    else if (playWith === 'planets') dispatch(set_player_card_planets(res1.data));\n    else if (playWith === 'starships') dispatch(set_player_card_starships(res1.data));\n\n    let randNum2 = Math.floor(Math.random() * 15) + 1;\n    const res2 = await axios.get(`${BASE_URL}${playWith}/${randNum2}/`);\n    if (playWith === 'people') dispatch(set_computer_card_people(res2.data));\n    else if (playWith === 'planets') dispatch(set_computer_card_planets(res2.data));\n    else if (playWith === 'starships') dispatch(set_computer_card_starships(res2.data));\n\n    // compares the MASS and set the points \n    if (playWith === 'people') {\n      if (res1 && res2) {\n        if (res1.data.mass > res2.data.mass) {\n          dispatch(set_player_score());\n        } else if (res2.data.mass > res1.data.mass) {\n          dispatch(set_computer_score());\n        }\n      }\n    }\n\n    // compares the CREW and set the points \n    if (playWith === 'starships') {\n      if (res1 && res2) {\n        if (res1.data.crew > res2.data.crew) {\n          dispatch(set_player_score());\n        } else if (res2.data.crew > res1.data.crew) {\n          dispatch(set_computer_score());\n        }\n      }\n    }\n\n    // compares the DIAMETER and set the points \n    if (playWith === 'planets') {\n      if (res1 && res2) {\n        if (res1.data.diameter > res2.data.diameter) {\n          dispatch(set_player_score());\n        } else if (res2.data.diameter > res1.data.diameter) {\n          dispatch(set_computer_score());\n        }\n      }\n    }\n\n    dispatch(set_loading(false));\n  }\n}","import { Badge, Button, Col } from \"react-bootstrap\";\nimport Row from 'react-bootstrap/Row';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { play_option } from '../../action';\nimport { RootStore } from \"../../Store\";\n\nconst Nav: React.FC = () => {\n  const playOption = useSelector((store: RootStore) => store.playOption);\n  const dispatch = useDispatch();\n  return (\n    <Row>\n      <Col>\n        <h5>\n        <Button variant={playOption === 'people' ? 'primary' : 'light'} onClick={() => dispatch(play_option('people'))}>\n          People <Badge pill variant=\"light\">(mass)</Badge>\n        </Button>\n        <Button variant={playOption === 'planets' ? 'primary' : 'light'} onClick={() => dispatch(play_option('planets'))}>\n          Planets <Badge pill variant=\"light\">(diameter)</Badge>\n        </Button>\n        <Button variant={playOption === 'starships' ? 'primary' : 'light'} onClick={() => dispatch(play_option('starships'))}>\n          Starships <Badge pill variant=\"light\">(crew)</Badge>\n        </Button>\n        </h5>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Nav;","import { Button, Card } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { set_card_flip, set_game_state } from '../../action';\n\nconst PlayMore: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const setGame = () => {\n    dispatch(set_card_flip(false));\n    dispatch(set_game_state(true));\n  }\n\n  return (\n    <div style={{paddingTop: '20px'}}>\n      <Card bg='info' text='white' className=\"text-center\">\n        <Card.Body>\n          <h4>Isn't it interesting? Let's play again!</h4>\n          <Button aria-label=\"play-more\" variant=\"warning\" style={{width: '10rem'}} onClick={setGame} >Play Again</Button>\n        </Card.Body>\n      </Card>\n    </div>\n\n  )\n};\n\nexport default PlayMore;","import { ListGroup } from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card';\nimport ReactCardFlip from 'react-card-flip';\nimport { PeopleI } from '../../types/actionTypes';\n\ninterface PropsI {\n  info?: PeopleI;\n  isCardFlipped: boolean;\n\n}\n\nexport default function InfoCardPeople ({ info, isCardFlipped }: PropsI) {\n  return (\n    <ReactCardFlip isFlipped={isCardFlipped} flipDirection=\"horizontal\">\n        <div>\n          <Card border=\"info\" bg='info' style={{ height: '16rem' }}>\n          </Card>\n        </div>\n \n        <div>\n          <Card border=\"info\" style={{ height: '16rem' }}>\n            <Card.Title></Card.Title>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                  <ListGroup.Item>Name: {info && info.name}</ListGroup.Item>\n                  <ListGroup.Item>Height: {info && info.height}</ListGroup.Item>\n                  <ListGroup.Item>Gender: {info && info.gender}</ListGroup.Item>\n                  <ListGroup.Item variant=\"info\">Mass: {info && info.mass}</ListGroup.Item>\n                  \n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n      </ReactCardFlip>\n  )\n}","import { ListGroup } from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card';\nimport ReactCardFlip from 'react-card-flip';\nimport { PlanetsI } from '../../types/actionTypes';\n\ninterface PropsI {\n  info?: PlanetsI;\n  isCardFlipped: boolean;\n}\n\nexport default function InfoCardPlanets ({ info, isCardFlipped }: PropsI) {\n  return (\n    <ReactCardFlip isFlipped={isCardFlipped} flipDirection=\"horizontal\">\n        <div>\n          <Card border=\"info\" bg='info' style={{ height: '16rem' }}>\n          </Card>\n        </div>\n \n        <div>\n          <Card border=\"info\" style={{ height: '16rem' }}>\n            <Card.Title></Card.Title>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                  <ListGroup.Item>Name: {info && info.name}</ListGroup.Item>\n                  <ListGroup.Item>Rotation Period: {info && info.rotation_period}</ListGroup.Item>\n                  <ListGroup.Item>Orbital: {info && info.orbital_period}</ListGroup.Item>\n                  <ListGroup.Item variant=\"info\">Diameter: {info && info.diameter}</ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n      </ReactCardFlip>\n  )\n}","import { ListGroup } from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card';\nimport ReactCardFlip from 'react-card-flip';\nimport { StarShipI } from '../../types/actionTypes';\n\ninterface PropsI {\n  info?: StarShipI;\n  isCardFlipped: boolean;\n\n}\n\nexport default function InfoCardStarships ({ info, isCardFlipped }: PropsI) {\n  return (\n    <ReactCardFlip isFlipped={isCardFlipped} flipDirection=\"horizontal\">\n        <div>\n          <Card border=\"info\" bg='info' style={{ height: '16rem' }}>\n          </Card>\n        </div>\n \n        <div>\n          <Card border=\"info\" style={{ height: '16rem' }}>\n            <Card.Title></Card.Title>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                  <ListGroup.Item>Name: {info && info.name}</ListGroup.Item>\n                  <ListGroup.Item>Model: {info && info.model}</ListGroup.Item>\n                  <ListGroup.Item>Cost in credits: {info && info.cost_in_credits}</ListGroup.Item>\n                  <ListGroup.Item variant=\"info\">Crew: {info && info.crew}</ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n      </ReactCardFlip>\n  )\n}","import { Badge, Button } from 'react-bootstrap';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchSWInfo, set_card_flip, set_game_state, user_logout } from '../../action';\nimport { RootStore } from '../../Store';\nimport Nav from '../Buttons/Nav';\nimport PlayMore from '../Buttons/PlayMore';\nimport InfoCardPeople from '../InfoCard/InfoCardPeople';\nimport InfoCardPlanets from '../InfoCard/InfoCardPlanets';\nimport InfoCardStarships from '../InfoCard/InfoCardStarships';\nimport './game.scss';\n\nconst Game: React.FC = () => {\n  const playerCardPeople = useSelector((store: RootStore) => store.playerCardPeople);\n  const playerCardPlanets = useSelector((store: RootStore) => store.playerCardPlanets);\n  const playerCardStarShip = useSelector((store: RootStore) => store.playerCardStarShip);\n  const computerCardPeople = useSelector((store: RootStore) => store.computerCardPeople);\n  const computerCardPlanets = useSelector((store: RootStore) => store.computerCardPlanets);\n  const computerCardStarShip = useSelector((store: RootStore) => store.computerCardStarShip);\n  const isCardFlipped = useSelector((store: RootStore) => store.isFlipped);\n  const playGameState = useSelector((store: RootStore) => store.playGame);\n  const playerScore = useSelector((store: RootStore) => store.playerScore);\n  const computerScore = useSelector((store: RootStore) => store.computerScore);\n  const username = useSelector((store: RootStore) => store.username);\n  const playOption = useSelector((store: RootStore) => store.playOption);\n  \n  const dispatch = useDispatch();\n\n  // handles the play game, set card flip, fetch data and set game state\n  const playGame = () => {\n    dispatch(set_card_flip(true));\n    console.log(playOption);\n    if(playOption) dispatch(fetchSWInfo(playOption))\n    dispatch(set_game_state(false));\n  }\n\n  return (\n    <>\n      <div className='welcome'>\n          <h2>Welcome {username}!</h2>\n          <h6 onClick={() => dispatch(user_logout())}>Logout</h6>\n      </div>\n      <div className='gameRules'>\n        <h4>Let's play card game with computer.</h4>\n        <p>To play the game click on PLAY button and it will randomly fetch the data from The Star Wars API. Whichever's card gets more mass value will get one point. In case of equal mass no one gets points</p>\n      </div>\n      <Nav />\n      \n      <Row>\n        <Col><h5>{username}'s Score <Badge variant=\"primary\">{playerScore}</Badge></h5></Col>\n        <Col><h5>Computer's Score <Badge variant=\"primary\">{computerScore}</Badge></h5></Col>\n      </Row>\n      <div className='cardContainer'>\n        \n        <Row>\n          <Col>\n            { playOption === 'people' && <InfoCardPeople info={playerCardPeople} isCardFlipped={isCardFlipped} /> }\n            { playOption === 'planets' && <InfoCardPlanets info={playerCardPlanets} isCardFlipped={isCardFlipped} /> }\n            { playOption === 'starships' && <InfoCardStarships info={playerCardStarShip} isCardFlipped={isCardFlipped} /> }\n          </Col>\n          <Col>\n            { playOption === 'people' && <InfoCardPeople info={computerCardPeople} isCardFlipped={isCardFlipped} /> }\n            { playOption === 'planets' && <InfoCardPlanets info={computerCardPlanets} isCardFlipped={isCardFlipped} /> }\n            { playOption === 'starships' && <InfoCardStarships info={computerCardStarShip} isCardFlipped={isCardFlipped} /> }\n          </Col>\n        </Row>\n        <Row className='playButton'>\n          {playGameState === true && <Button variant=\"warning\" style={{width: '10rem'}} onClick={playGame}>Play</Button>}\n        </Row>\n        \n      </div>\n      {playGameState === false && <PlayMore /> }\n  </>\n  )\n};\n\nexport default Game;","import { useState } from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { user_login } from '../../action';\nimport './login.scss';\n\nexport default function Login () {\n  const [user, setUser] = useState('');\n  const dispatch = useDispatch();\n\n  const onSubmit = (e: { preventDefault: () => void; }) => {\n    e.preventDefault();\n    dispatch(user_login(user));\n  }\n  return (\n    <div className='login'>\n      <div className='inner'>\n        <Card className=\"text-center\" border=\"info\" bg='info' text='white'>\n      <Card.Body>\n        <div>\n            <h1>\n              Welcome <br /><span>to</span><br />Card Game\n            </h1>\n          </div>\n\n        <form className='formDiv' onSubmit={onSubmit}>\n          <label htmlFor='firstName'>Please Enter Your Name</label>\n          <input name=\"firstName\" value={user} onChange={e => setUser(e.target.value)}  />\n          <Button type=\"submit\" variant=\"warning\" style={{width: '14rem'}}>ENTER</Button>\n        </form>\n        </Card.Body>\n    </Card>\n      </div>\n    </div>\n    \n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport Game from './components/Game/Game';\nimport Login from './components/Login/Login';\nimport { RootStore } from './Store';\n\nconst App: React.FC = () => {\n  const user = useSelector((store: RootStore) => store.username);\n  return (\n    <div className='container'>\n      { user ? <Game /> : <Login /> }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { PeopleI, PlanetsI, SET_COMPUTER_CARD_PEOPLE, SET_COMPUTER_CARD_PLANETS, SET_COMPUTER_CARD_STARSHIPS, SET_COMPUTER_SCORE, SET_FLIPPED, SET_GAME_STATE, SET_LOADING, SET_PLAYER_CARD_PEOPLE, SET_PLAYER_CARD_PLANETS, SET_PLAYER_CARD_STARSHIPS, SET_PLAYER_SCORE, SET_PLAY_OPTION, StarShipI, StarWarsDispatchTypes, USER_LOGIN, USER_LOGOUT } from './types/actionTypes';\n\nexport interface DefaultStateI {\n  loading: boolean,\n  username?: string,\n  playerCardPeople?: PeopleI,\n  computerCardPeople?: PeopleI,\n  playerCardStarShip?: StarShipI,\n  computerCardStarShip?: StarShipI,\n  playerCardPlanets?: PlanetsI,\n  computerCardPlanets?: PlanetsI,\n  isFlipped: boolean,\n  playGame: boolean,\n  playerScore: number,\n  computerScore: number,\n  playOption: string\n}\n\nconst defaultState: DefaultStateI = {\n  loading: false,\n  isFlipped: false,\n  playGame: true,\n  playerScore: 0,\n  computerScore: 0,\n  playOption: 'people'\n};\n\nconst Reducer = (state: DefaultStateI = defaultState, action: StarWarsDispatchTypes): DefaultStateI => {\n  switch (action.type) {\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: action.loading\n      }\n    case SET_PLAYER_CARD_PEOPLE: {\n      return {\n        ...state,\n        playerCardPeople: action.playerCardPeople\n      }\n    }\n    case SET_COMPUTER_CARD_PEOPLE: {\n      return {\n        ...state,\n        computerCardPeople: action.computerCardPeople\n      }\n    }\n    case SET_PLAYER_CARD_STARSHIPS: {\n      return {\n        ...state,\n        playerCardStarShip: action.playerCardStarShip\n      }\n    }\n    case SET_COMPUTER_CARD_STARSHIPS: {\n      return {\n        ...state,\n        computerCardStarShip: action.computerCardStarShip\n      }\n    }\n    case SET_PLAYER_CARD_PLANETS: {\n      return {\n        ...state,\n        playerCardPlanets: action.playerCardPlanets\n      }\n    }\n    case SET_COMPUTER_CARD_PLANETS: {\n      return {\n        ...state,\n        computerCardPlanets: action.computerCardPlanets\n      }\n    }\n    case SET_FLIPPED: {\n      return {\n        ...state,\n        isFlipped: action.isFlipped\n      }\n    }\n    case SET_GAME_STATE: {\n      return {\n        ...state,\n        playGame: action.playGame\n      }\n    }\n    case SET_PLAYER_SCORE: {\n      return {\n        ...state,\n        playerScore: state.playerScore + 1\n      }\n    }\n    case SET_COMPUTER_SCORE: {\n      return {\n        ...state,\n        computerScore: state.computerScore + 1\n      }\n    }\n    case USER_LOGIN: {\n      return {\n        ...state,\n        username: action.username\n      }\n    }\n    case USER_LOGOUT: {\n      return {\n        ...state,\n        username: ''\n      }\n    }\n    case SET_PLAY_OPTION: {\n      return {\n        ...state,\n        playOption: action.playOption\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default Reducer;","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport Reducer from './Reducer';\n\nconst Store = createStore(Reducer, applyMiddleware(thunk));\n\nexport type RootStore = ReturnType<typeof Reducer>\n\nexport default Store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Store from './Store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}